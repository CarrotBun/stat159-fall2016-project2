library(pls)
credit = read.csv("data/scaled-credit.csv")
setwd("~/stat159/stat159-project2")
credit = read.csv("data/scaled-credit.csv")
source("code/scripts/Train-Test.R")
set.seed(159)
pls_reg = plsr(as.vector(credit[train_set_indices, 12]) ~ as.matrix(credit[train_set_indices, 1:11]),
library(pander)
min(pls_reg$validation$PRESS)
library(pander)
min(pls_reg$validation$PRESS)
pls_reg = plsr(as.vector(credit[train_set_indices, 12]) ~ as.matrix(credit[train_set_indices, 1:11]),
validation = "CV")
library(pander)
mse_plsr = min(pls_reg$validation$PRESS)
mse_plsr
pls_reg$validation$PRESS
pls_reg$validation$PRESS
mse_plsr
which.min(pls_reg$validation$PRESS)
bestmodel = which.min(pls_reg$validation$PRESS)
validationplot(pls_reg, val.type = "MSEP", main = "PLSR Cross Validated Error")
abline(v = 7, lty = 2)
png("images/plsr-validation.png")
validationplot(pls_reg, val.type = "MSEP", main = "PLSR Cross Validated Error")
abline(v = 7, lty = 2)
dev.off()
predict(pls_reg, as.matrix(credit[test_set_indices, 1:11]), ncomp = bestmodel)
pls_pred = predict(pls_reg, as.matrix(credit[test_set_indices, 1:11]), ncomp = bestmodel)
plsr(as.vector(credit[test_set_indices, 12]) ~ as.matrix(credit[test_set_indices, 1:11]),
ncomp = bestmodel)$fitted.values
MSEP(pls_pred)
mean((pls_pred-credit[test_set_indices, 12])^2)
pls_tMSE = mean((pls_pred-credit[test_set_indices, 12])^2)
pls_final = plsr(as.vector(credit[ ,12]) ~ as.matrix(credit[ ,1:11]),
ncomp = bestmodel)
save(pls_reg, bestmodel, pls_tMSE, pls_final, file = "data/pls-regression.RData")
save(pls_reg, bestmodel, pls_tMSE, pls_final, file = "data/PLS-Regression.RData")
credit = read.csv("data/scaled-credit.csv")
source("code/scripts/Train-Test.R")
library(glmnet)
grid <- 10^seq(10, -2, length = 100)
lasso_reg = cv.glmnet(as.matrix(credit[train_set_indices, 1:11]),
as.vector(credit[train_set_indices, 12]),
intercept = FALSE,
standardize = FALSE,
lambda = grid)
lasso_reg$lambda.min
bestlam = lasso_reg$lambda.min
plot(lasso_reg$lambda, ylab = "Lasso Lambda", main = "Lambda Grid")
plot(lasso_reg)
lasso.cv = cv.glmnet(as.matrix(credit[train_set_indices, 1:11]),
as.vector(credit[train_set_indices, 12]),
intercept = FALSE,
standardize = FALSE,
lambda = grid)
png("images/lasso-validation.png")
plot(lasso.cv)
dev.off()
plot(predict(lasso_cv, as.matrix(credit[test_set_indices, 1:11]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(credit[test_set_indices, 12], col = "black")
legend(0, 3, legend = c("Predicted", "Actual"), fill = c("red", "black"), bty = "n")
plot(predict(lasso_cv, as.matrix(credit[test_set_indices, 1:11]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lasso_cv = cv.glmnet(as.matrix(credit[train_set_indices, 1:11]),
as.vector(credit[train_set_indices, 12]),
intercept = FALSE,
standardize = FALSE,
lambda = grid)
plot(predict(lasso_cv, as.matrix(credit[test_set_indices, 1:11]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(credit[test_set_indices, 12], col = "black")
legend(0, 3, legend = c("Predicted", "Actual"), fill = c("red", "black"), bty = "n")
plot(lasso_cv)
lasso_pred = predict(lasso_cv, s = "lambda.min", newx = as.matrix(credit[test_set_indices, 1:11]))
lasso_tMSE = mean((lasso_pred - credit[test_set_indices, 12])^2)
lasso_tMSE
cv.glmnet(as.matrix(credit[train_set_indices, 1:11]),
as.vector(credit[train_set_indices, 12]),
intercept = FALSE,
standardize = FALSE,
lambda = bestlam)
glmnet(as.matrix(credit[train_set_indices, 1:11]),
as.vector(credit[train_set_indices, 12]),
intercept = FALSE,
standardize = FALSE,
lambda = bestlam)
lasso_final = glmnet(as.matrix(credit[train_set_indices, 1:11]),
as.vector(credit[train_set_indices, 12]),
intercept = FALSE,
standardize = FALSE,
lambda = bestlam)
fitted_values = predict(lasso_final, as.matrix(credit[test_set_indices, 1:11]))
fitted_values
plot(predict(lasso_cv, as.matrix(credit[test_set_indices, 1:11]), s = "lambda.min"), type = "l"
, col = "red",main = "Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(credit[test_set_indices, 12], col = "black")
lasso_final
cat("\n")
coef(lasso_final)
sink("data/lasso-results.txt")
cat("Best Lambda:")
bestlam
cat("\n Test MSE: ")
lasso_tMSE
cat("\n Full Fitted Values: \n")
fitted_values
cat("\n Full Coefficient Values: \n")
coef(lasso_final)
sink()
sink("data/lasso-results.txt")
cat("Best Lambda:")
bestlam
cat("\n Test MSE: ")
lasso_tMSE
cat("\n Full Coefficient Values: \n")
coef(lasso_final)
sink()
save(lasso_cv, bestlam, lasso_tMSE, lasso_final, file = "data/LASSO-Regression.RData")
plot(predict(pls_reg, as.matrix(credit[test_set_indices, 1:11]), ncomp = bestmodel),
type = "l", col = "red",main = "Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
credit = read.csv("data/scaled-credit.csv")
source("code/scripts/Train-Test.R")
set.seed(159)
pls_reg = plsr(as.vector(credit[train_set_indices, 12]) ~ as.matrix(credit[train_set_indices, 1:11]),
validation = "CV")
bestmodel = which.min(pls_reg$validation$PRESS)
plot(predict(pls_reg, as.matrix(credit[test_set_indices, 1:11]), ncomp = bestmodel),
type = "l", col = "red",main = "Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(credit[test_set_indices, 12], col = "black")
plot(predict(pls_reg, as.matrix(credit[test_set_indices, 1:11]), ncomp = bestmodel),
type = "l", col = "red",main = "PLSR Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(credit[test_set_indices, 12], col = "black")
legend(0, 3, legend = c("Predicted", "Actual"), fill = c("red", "black"), bty = "n")
plot(predict(lasso_cv, as.matrix(credit[test_set_indices, 1:11]), s = "lambda.min"),
type = "l", col = "red",main = "Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(credit[test_set_indices, 12], col = "black")
legend(0, 3, legend = c("Predicted", "Actual"), fill = c("red", "black"), bty = "n")
plot(predict(lasso_cv, as.matrix(credit[test_set_indices, 1:11]), s = "lambda.min"),
type = "l", col = "red",main = "LASSO Predicted and Actual Credit Balances",
ylab = "Normalized Credit Balance")
lines(credit[test_set_indices, 12], col = "black")
legend(0, 3, legend = c("Predicted", "Actual"), fill = c("red", "black"), bty = "n")
